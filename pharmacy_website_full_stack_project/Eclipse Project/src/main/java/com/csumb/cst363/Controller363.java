package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.text.SimpleDateFormat;  

import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller    
public class Controller363 
{
   @Autowired
   private JdbcTemplate jdbcTemplate;
   
   /*
    * Doctor requests form to create new prescription.
    */
   @GetMapping("/prescription/new")
   public String newPrescripton(Model model) {
      model.addAttribute("prescription", new Prescription());
      return "prescription_create";
   }
   
   /* 
    * Process the new prescription form.
    * 1.  Validate that Doctor SSN exists and matches Doctor Name.
    * 2.  Validate that Patient SSN exists and matches Patient Name.
    * 3.  Validate that Drug name exists.
    * 4.  Insert new prescription.
    * Return error message and the filled in prescription form
    *   or the prescription with the rxid number generated by the database.
    */
   @PostMapping("/prescription")
   public String addPrescription(@Valid Prescription p, BindingResult result, Model model) 
   {
      if (result.hasErrors()) 
      {
         System.out.println("Binding error in addPrescription.");
      }
      System.out.println(p.toString());  // debug -- print form data to console
      
      /*
       * replace following with code to validate the prescription 
       * and insert a new prescription
       */
      
      try 
      {
          Connection conn = jdbcTemplate.getDataSource().getConnection();
          
          // Check if Doctor SSN exists
          PreparedStatement ps = conn.prepareStatement("SELECT ssn FROM doctor");
          ResultSet rs = ps.executeQuery();
          checkDoctorSSN: try
          {
             while(rs.next())
                if (p.getDoctor_ssn().equals(rs.getString(1)))
                   break checkDoctorSSN;
             throw new Exception();
          }
          catch (Exception e)
          {
             String message = "Error: Incorrect Doctor SSN";
             System.out.println(message);
             model.addAttribute("message",message);
             return "prescription_create";
          }
          
          // Check if Doctor name matches SSN
          ps = conn.prepareStatement("SELECT Full_Name FROM doctor WHERE ssn = ?");          
          ps.setString(1, p.getDoctor_ssn());
          rs = ps.executeQuery();
          checkDoctorName: try
          {
             rs.next();
             if (p.getDoctorName().equals(rs.getString(1)))
                   break checkDoctorName;
             throw new Exception();
          }
          catch (Exception e)
          {
             String message = "Error: Incorrect Doctor Name";
             System.out.println(message);
             model.addAttribute("message",message);
             return "prescription_create";
          }
          
          // Check if Patient SSN exists
          ps = conn.prepareStatement("SELECT ssn FROM patient");
          rs = ps.executeQuery();
          checkPatientSSN: try
          {
             while(rs.next())
                if (p.getPatient_ssn().equals(rs.getString(1)))
                   break checkPatientSSN;
             throw new Exception();
           }
           catch (Exception e)
           { 
              String message = "Error: Incorrect patient SSN";
              System.out.println(message);
              model.addAttribute("message",message);
              return "prescription_create";
           }
          
          // Check if Patient name matches SSN
          ps = conn.prepareStatement("SELECT Full_Name FROM patient WHERE ssn = ?");
          ps.setString(1, p.getPatient_ssn());
          rs = ps.executeQuery();
          checkPatientName: try
          {
             rs.next();
             if (p.getPatientName().equals(rs.getString(1)))
                break checkPatientName;
             throw new Exception();
          }
           catch (Exception e)
          {
              String message = "Error: Incorrect patient name";
              System.out.println(message);
              model.addAttribute("message",message);
              return "prescription_create";
          }
          
          // Check if drug name exists
          ps = conn.prepareStatement("SELECT Name FROM drug");
          rs = ps.executeQuery();
          checkDrugName: try
          {
             while(rs.next())
                if (p.getDrugName().equals(rs.getString(1)))
                   break checkDrugName;
             throw new Exception();
          }
          catch (Exception e)
          {
             String message = "Error: Incorrect drug name";
             System.out.println(message);
             model.addAttribute("message",message);
             return "prescription_create";
          }
          
          // Get the next PrescriptionID available
          ps = conn.prepareStatement("SELECT COUNT(PrescriptionID) FROM doctor_prescribes_drug");
          rs = ps.executeQuery();
          rs.next();
          int PrescriptionID = Integer.valueOf(rs.getString(1)) + 1;
          p.setRxid(String.valueOf(PrescriptionID));
          
          // Format date into string
          SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd");
          String strDate= formatter.format(new java.util.Date());  
          
          // Prepare statement for insert, then execute statement
          ps = conn.prepareStatement("insert into doctor_prescribes_drug (PrescriptionID, Doctor_SSN, Patient_SSN, Drug_Name, Prescription_Date, Prescription_Quantity) values(?, ?, ?, ?, ?, ?)");
          ps.setString(1, String.valueOf(PrescriptionID));
          ps.setString(2, p.getDoctor_ssn());
          ps.setString(3, p.getPatient_ssn());
          ps.setString(4, p.getDrugName());
          ps.setString(5, strDate);
          ps.setString(6, String.valueOf(p.getQuantity()));
          ps.executeUpdate();
          
          
          // Close the connection, add p to the model, increment PrescriptionID and return
          conn.close();
          model.addAttribute("prescription", p);
          return "prescription_show";     
      }
      catch (SQLException se) 
      {
         System.out.println("Error: SQLException " + se.getMessage() );
         model.addAttribute("message",se.getMessage());
         return "prescription_create";
      }  
   }
   
   /* 
    * patient requests the form to fill a prescription
    */
   @GetMapping("/prescription/fill")
   public String getfillForm(Model model) {
      model.addAttribute("prescription", new Prescription());
      return "prescription_fill";
   }
   
   /*
    * process the prescription fill form
    * 1.  Validate that rxid, pharmacy name and pharmacy address are entered 
    *     and uniquely identify a prescript and one pharmacy.
    * 2.  update prescription with pharmacyid, name and address.
    * 3.  update prescription with today's date.
    * Display updated prescription 
    *   or if there is an error show the form with an error message.
    */
   @PostMapping("/prescription/fill")
   public String processFillForm(@Valid Prescription p, BindingResult result, Model model) 
   {
      if (result.hasErrors()) 
      {
         System.out.println("Binding error in processFillForm.");
      }
      System.out.println(p.toString());  // debug -- print form data to console
   
      
      try 
      {
          Connection conn = jdbcTemplate.getDataSource().getConnection();
          
          // Check if PrescriptionID exists
          PreparedStatement ps = conn.prepareStatement("SELECT PrescriptionID FROM doctor_prescribes_drug");
          ResultSet rs = ps.executeQuery();
          checkPrescriptionID: try
          {
             while(rs.next())
                if (p.getRxid().equals(rs.getString(1)))
                   break checkPrescriptionID;
             throw new Exception();
          }
          catch (Exception e)
          {
             String message = "Error: Incorrect PrescriptionID";
             System.out.println(message);
             model.addAttribute("message",message);
             return "prescription_fill";
          }
          
          
          // Check if Pharmacy name exists
          ps = conn.prepareStatement("SELECT Name FROM pharmacy");
          rs = ps.executeQuery();
          checkPharmacyName: try
          {
             while(rs.next())
                if (p.getPharmacyName().equals(rs.getString(1)))
                   break checkPharmacyName;
             throw new Exception();
          }
          catch (Exception e)
          {
             String message = "Error: Incorrect Pharmacy Name";
             System.out.println(message);
             model.addAttribute("message",message);
             return "prescription_fill";
          }
          
          
          // Check if Pharmacy Address Matches
          ps = conn.prepareStatement("SELECT Address FROM pharmacy");
          rs = ps.executeQuery();
          checkPharmacyStreet: try
          {
             rs.next();
             if (p.getPharmacyAddress().equals(rs.getString(1)))
                break checkPharmacyStreet;
             throw new Exception();
          }
           catch (Exception e)
          {
              String message = "Error: Incorrect Pharmacy Street";
              System.out.println(message);
              model.addAttribute("message",message);
              return "prescription_fill";
          }
          
          // Get Doctor Name, and set it
          ps = conn.prepareStatement("SELECT Full_Name FROM doctor, doctor_prescribes_drug "
                + "WHERE Doctor_SSN = SSN AND PrescriptionID = ? ");
          ps.setInt(1, Integer.valueOf(p.getRxid()));
          rs = ps.executeQuery();
          rs.next();
          String DoctorName = rs.getString(1);
          p.setDoctorName(DoctorName);
          
          // Get Pharmacy PhoneNumber, and set it
          ps = conn.prepareStatement("SELECT Phone_Number FROM pharmacy "
                + "WHERE Name = ? ");
          ps.setString(1, p.getPharmacyName());
          rs = ps.executeQuery();
          rs.next();
          String PhoneNumber = rs.getString(1);
          p.setPharmacyPhone(PhoneNumber);
          
          // Get cost, and set it
          ps = conn.prepareStatement("SELECT Drug_Price, Prescription_Quantity FROM pharmacy_has_drug, doctor_prescribes_drug "
                + "WHERE pharmacy_has_drug.Drug_Name = doctor_prescribes_drug.Drug_Name "
                + "AND PrescriptionID = ? AND Pharmacy_Name = ?");
          ps.setInt(1, Integer.valueOf(p.getRxid()));
          ps.setString(2, p.getPharmacyName());
          rs = ps.executeQuery();
          rs.next();
          double price = rs.getDouble(1);
          double quantity = Integer.valueOf(rs.getString(2));
          p.setCost(quantity * price);
          p.setQuantity((int) quantity);
          
          // Get the next available Order_Num
          ps = conn.prepareStatement("SELECT COUNT(Order_Num) FROM pharmacy_order");
          rs = ps.executeQuery();
          rs.next();
          int Order_Num = Integer.valueOf(rs.getString(1)) + 1;
          
          // Set and format the date
          SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd");
          String strDate= formatter.format(new java.util.Date());  
          p.setDateFilled(strDate);
          
          
          // Prepare statement for insert, then execute statement
          ps = conn.prepareStatement("insert into pharmacy_order (Order_Num, Doctor_Prescribes_Drug_PrescriptionID, Pharmacy_Name, Order_Fill_Date) values(?, ?, ?, ?)");
          ps.setInt(1, Order_Num);
          ps.setInt(2, Integer.valueOf(p.getRxid()));
          ps.setString(3, p.getPharmacyName());
          ps.setString(4, strDate);
          ps.executeUpdate();
          
          
          
          conn.close();
          model.addAttribute("prescription", p);
          return "prescription_show";  
      }
      catch (SQLException se) 
      {
         System.out.println("Error: SQLException " + se.getMessage() );
         model.addAttribute("message",se.getMessage());
         return "prescription_fill";
      }  
   }
   
   /*
    * process search request for quantity used for each drug for a given pharmacy.
    * input is pharmacyID, startDate and endDate
    * output is drugName, quantity used to fill prescriptions
    * 1.  validate pharmacyID 
    */
   @GetMapping("/pharmacy")
   public String pharmacyReport(
         @RequestParam("pharmacyID") String pharmacyID,
         @RequestParam("startDate") String startDate,
         @RequestParam("endDate") String endDate,
         Model model) 
   {
      System.out.println("pharamcy report. ID="+pharmacyID+", start="+startDate+", end="+endDate);  // for debug 
      
      try 
      {
          Connection conn = jdbcTemplate.getDataSource().getConnection();
          
          // Check if Pharmacy name exists
          PreparedStatement ps = conn.prepareStatement("SELECT Name FROM pharmacy");
          ResultSet rs = ps.executeQuery();
          checkPharmacyName: try
          {
             while(rs.next())
                if (pharmacyID.equals(rs.getString(1)))
                   break checkPharmacyName;
             throw new Exception();
          }
          catch (Exception e)
          {
             String message = "Error: Incorrect Pharmacy Name";
             System.out.println(message);
             model.addAttribute("message",message);
             return "pharmacy_report";
          }
          
          
          // Covert string to date, then issue statement for quantity used for each drug
          ps = conn.prepareStatement("SELECT pharmacy_has_drug.drug_name, SUM(Prescription_Quantity) "
                + "FROM pharmacy_has_drug, pharmacy_order, doctor_prescribes_drug "
                + "WHERE pharmacy_has_drug.pharmacy_name = pharmacy_order.pharmacy_name AND prescriptionID = Doctor_Prescribes_Drug_PrescriptionID "
                + "AND doctor_prescribes_drug.drug_name = Pharmacy_has_Drug.drug_name "
                + "AND pharmacy_has_drug.Pharmacy_Name = ? "
                + "AND order_fill_date > ? AND order_fill_date < ?" 
                + "GROUP BY pharmacy_has_drug.drug_name");
          ps.setString(1, pharmacyID.trim());
          ps.setString(2, startDate.trim());
          ps.setString(3, endDate.trim());
          rs = ps.executeQuery();

          ArrayList<ReportElement1> drugs = new ArrayList<>();
          while (rs.next())
          {
             ReportElement1 myElement = new ReportElement1 (rs.getString(1), rs.getInt(2));
             drugs.add(myElement);
          }
          
          conn.close();
          model.addAttribute("startDate", startDate);
          model.addAttribute("endDate", endDate);
          model.addAttribute("pharmacyID", pharmacyID);
          model.addAttribute("report", drugs);
          return "pharmacy_report";
      }
      catch (SQLException se) 
      {
         System.out.println("Error: SQLException in PharmacyReport: " + se.getMessage() );
         model.addAttribute("message",se.getMessage());
         return "pharmacy_report";
      }  
   }
   
   
   /* 
    * process search request for FDA of quantity of drug prescribed by doctor
    * input is drugname, date range
    * output is doctor name, quantity prescribed
    * 1.  validate the drug name (it may be a partial name of a drug)
    */
   @GetMapping("/fda")
   public String fdaReport(
         @RequestParam("drug") String drug, 
         @RequestParam("startDate") String startDate,
         @RequestParam("endDate") String endDate,
         Model model) 
   {
         System.out.println("fda report. drug="+drug+", start="+startDate+", end="+endDate);  // for debug
         
         try 
         {
             Connection conn = jdbcTemplate.getDataSource().getConnection();
             
             // Check if drug name exists
             PreparedStatement ps = conn.prepareStatement("SELECT Name FROM drug");
             ResultSet rs = ps.executeQuery();
             checkDrugName: try
             {
                while(rs.next())
                   if (rs.getString(1).contains(drug))
                      break checkDrugName;
                throw new Exception();
             }
             catch (Exception e)
             {
                String message = "Error: Incorrect drug name";
                System.out.println(message);
                model.addAttribute("message",message);
                return "fda_report";         
             }
             
             ps = conn.prepareStatement("SELECT Full_Name, SUM(prescription_quantity) FROM doctor, doctor_prescribes_drug " +
             "WHERE SSN = Doctor_SSN AND prescription_date > ? AND prescription_date < ? AND drug_name LIKE ? " );
             
             ps.setString(1, startDate.trim());
             ps.setString(2, endDate.trim());
             ps.setString(3, drug.trim() + "%");
             rs = ps.executeQuery();
             
             ArrayList<ReportElement1> drugs = new ArrayList<>();
             while (rs.next())
             {
                ReportElement1 myElement = new ReportElement1 (rs.getString(1), rs.getInt(2));
                drugs.add(myElement);
             }
             
             conn.close();
             model.addAttribute("startDate", startDate);
             model.addAttribute("endDate", endDate);
             model.addAttribute("drug", drug);
             model.addAttribute("report", drugs);
             return "fda_report";
         }
         catch (SQLException se) 
         {
            System.out.println("Error: SQLException in FDA_Report: " + se.getMessage() );
            model.addAttribute("message",se.getMessage());
            return "fda_report";         
         }
   }
   
   /*
    * return JDBC Connection using jdbcTemplate in Spring Server
    */
   private Connection getConnection() throws SQLException {
      Connection conn = jdbcTemplate.getDataSource().getConnection();
      return conn;
   }
   
}
