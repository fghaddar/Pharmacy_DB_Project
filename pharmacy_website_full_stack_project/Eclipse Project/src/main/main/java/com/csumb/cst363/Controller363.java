package com.csumb.cst363;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

@Controller    
public class Controller363 {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	/*
	 * Doctor requests form to create new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescripton(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}
	
	/* 
	 * Process the new prescription form.
	 * 1.  Validate that Doctor SSN exists and matches Doctor Name.
	 * 2.  Validate that Patient SSN exists and matches Patient Name.
	 * 3.  Validate that Drug name exists.
	 * 4.  Insert new prescription.
	 * Return error message and the filled in prescription form
	 *   or the prescription with the rxid number generated by the database.
	 */
	@PostMapping("/prescription")
	public String addPrescription(@Valid Prescription p, BindingResult result, Model model) {
		if (result.hasErrors()) {
			System.out.println("Binding error in addPrescription.");
		}
		System.out.println(p.toString());  // debug -- print form data to console
		
		/*
		 * replace following with code to validate the prescription 
		 * and insert a new prescription
		 */
		p.setRxid("RX1980031234");
		
		
		model.addAttribute("prescription", p);
		return "prescription_show";
	}
	
	/* 
	 * patient requests the form to fill a prescription
	 */
	@GetMapping("/prescription/fill")
	public String getfillForm(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_fill";
	}
	
	/*
	 * process the prescription fill form
	 * 1.  Validate that rxid, pharmacy name and pharmacy address are entered 
	 *     and uniquely identify a prescript and one pharmacy.
	 * 2.  update prescription with pharmacyid, name and address.
	 * 3.  update prescription with today's date.
	 * Display updated prescription 
	 *   or if there is an error show the form with an error message.
	 */
	@PostMapping("/prescription/fill")
	public String processFillForm(@Valid Prescription p, BindingResult result, Model model) {
		if (result.hasErrors()) {
			System.out.println("Binding error in processFillForm.");
		}

		/*
		 * replace the following code with code to validate the rxid, pharmacy name and 
		 * address from the database , and update the pharmacyID, cost and data of 
		 * the prescription
		 */
		p.setPharmacyID("70012345");
		p.setCost(12.504);
		p.setDateFilled( new java.util.Date().toString() );
		
		model.addAttribute("prescription", p);
		return "prescription_show";

	}
	
	/*
	 * process search request for quantity used for each drug for a given pharmacy.
	 * input is pharmacyID, startDate and endDate
	 * output is drugName, quantity used to fill prescriptions
	 * 1.  validate pharmacyID 
	 */
	@GetMapping("/pharmacy")
	public String pharmacyReport(
			@RequestParam("pharmacyID") String pharmacyID,
			@RequestParam("startDate") String startDate,
			@RequestParam("endDate") String endDate,
			Model model) {
		System.out.println("pharamcy report. ID="+pharmacyID+", start="+startDate+", end="+endDate);  // for debug 
		
		// replace the following code with code to perform database search 
		// returning drugname and quantity used
		ArrayList<ReportElement1> drugs = new ArrayList<>();
		drugs.add(new ReportElement1("Drug1", 5000));
		drugs.add(new ReportElement1("Drug2", 15000));
		drugs.add(new ReportElement1("Drug3", 7500));
		
		
		model.addAttribute("startDate", startDate);
		model.addAttribute("endDate", endDate);
		model.addAttribute("pharmacyID", pharmacyID);
		model.addAttribute("report", drugs);
		return "pharmacy_report";
	}
	
	
	/* 
	 * process search request for FDA of quantity of drug prescribed by doctor
	 * input is drugname, date range
	 * output is doctor name, quantity prescribed
	 * 1.  validate the drug name (it may be a partial name of a drug)
	 */
	@GetMapping("/fda")
	public String fdaReport(
			@RequestParam("drug") String drug, 
			@RequestParam("startDate") String startDate,
			@RequestParam("endDate") String endDate,
			Model model) {
		System.out.println("fda report. drug="+drug+", start="+startDate+", end="+endDate);  // for debug
		
		/*
		 * replace following code with code to perform db search
		 * for drug quantity used by doctors
		 */
		ArrayList<ReportElement1> drugs = new ArrayList<>();
		drugs.add(new ReportElement1("Doctor No", 5000));
		drugs.add(new ReportElement1("Doctor 007", 15000));
		
		
		
		model.addAttribute("startDate", startDate);
		model.addAttribute("endDate", endDate);
		model.addAttribute("drug", drug);
		model.addAttribute("report", drugs);
		return "fda_report";
	}
	
	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */
	private Connection getConnection() throws SQLException {
		Connection conn = jdbcTemplate.getDataSource().getConnection();
		return conn;
	}
	
}
